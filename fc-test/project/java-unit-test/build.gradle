plugins {
	id 'java'
	id 'jacoco'
	id 'java-test-fixtures'
	id 'io.freefair.lombok' version '8.4'
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
//	testImplementation(platform("org.junit:junit-bom:5.10.2"))		// Junit Aligning dependency versions
//	testImplementation("org.junit.jupiter:junit-jupiter")			// Junit Jupiter
//	testImplementation("org.junit.jupiter:junit-jupiter-params")	// Junit Jupiter extension for parameterized tests
//	testImplementation("org.mockito:mockito-core:5.7.0")			// Mockito Core
//	testImplementation("org.mockito:mockito-junit-jupiter:5.7.0")	// MockitoExtension
//	testImplementation("org.assertj:assertj-core:3.11.1")			// AssertJ
//	testImplementation("com.jayway.jsonpath:json-path:2.9.0")		// jsonpath
	testRuntimeOnly 'com.h2database:h2'

	testFixturesImplementation 'org.springframework.boot:spring-boot-starter-test'
	testFixturesImplementation 'org.springframework.boot:spring-boot-starter-data-jpa'
}

test {
	useJUnitPlatform()
}

jacocoTestReport {
	dependsOn(tasks.test)

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "**/UnitTestApplication.*"
            ])
        }))
    }
}

// for integration test
sourceSets {
	integrationTest {
		compileClasspath += sourceSets.main.output
		runtimeClasspath += sourceSets.main.output
	}
}

configurations {
	integrationTestImplementation.extendsFrom implementation
	integrationTestRuntimeOnly.extendsFrom runtimeOnly
}

dependencies {
	integrationTestImplementation 'org.springframework.boot:spring-boot-starter-test'
	integrationTestRuntimeOnly 'com.h2database:h2'
}