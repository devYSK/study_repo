# 시스템 확장 - XYZ

서비스의 트래픽이 올라가는 상황. 어떻게 할 것인가

**관리자 입장의 선택**

* Scale-out : 장비 갯수를 늘린다.

* Scale-up : 장비 스펙을 높인다.



**아키텍처 입장의 선택**

1. X﻿축 확장 - 복제해서 확장한다. (백엔드 인스턴스 수를 늘리는 것)
2. ﻿Y축 확장 - 기능을 분할한다. (Monolithic - MSA )
3. ﻿Z축 확장 - 데이터 파티셔닝. (Monolithic I MSA 둘 다 적용 가능)



## Monolithic 아키텍처

![image-20230209004003610](/Users/ysk/study/study_repo/inf-junior-spring-note/images//image-20230209004003610.png)

* 모든 기능과 서비스가 들어간 애플리케이션이 한 데이터베이스를 이용 

# MSA - 기능을 분할하여 확장하는 방법

* 마이크로서비스(microservice)는 애플리케이션을 느슨하게 결합된 서비스의 모임 마이크로서비스의 속성과 관련하여 아직 산업적인 합의는 없으며 공식적인 정의도 없다.

* 통념적으로 하나의 큰 서비스를 여러 작은 단위의 서비스로 나눠서 배포하는 방식

![image-20230209013312773](/Users/ysk/study/study_repo/inf-junior-spring-note/images//image-20230209013312773.png)

* 도메인별 다른 애플리케이션 / 데이터베이스에 나눠서 관리
* 게이트웨이를 둬서 필요한 요청에 맞게 애플리케이션을 연결
* 트래픽이 몰리는 서비스에 애플리케이션을 스케일 아웃할 수 있다.
* 그렇지만 MSA가 모놀리틱보다 우수한 구조라는건 아니다.
* 신경써야할 부분과 네트워크, 리소스가 훨씬 많아진다.

### HA

고가용성이란 가용성이 높다는 뜻으로서 절대 고장 나지 않음을 의미한다.



### 이중화

다중화(redundancy)는 시스템의 일부에 어떠한 장애가 발생했을 경우에 대비하여, 장애 발생 다음에도 시스템 전체의 기능을 계속 유지하도록 예비 장치를 평상시부터 백업으로서 배치해 운용하는 일이다



# 이중화 고려시의 선택지



### Active-Standby

![image-20230209030806358](/Users/ysk/study/study_repo/inf-junior-spring-note/images//image-20230209030806358.png)

* 같은 시스템을 띄우되 하나는 사용하지 않고 예비로 두는 방식

### Active-Active

![image-20230209030835126](/Users/ysk/study/study_repo/inf-junior-spring-note/images//image-20230209030835126.png)

* 둘다 띄우는 방식



### Master-Slave (Primary-Secondary)

![image-20230209030853767](/Users/ysk/study/study_repo/inf-junior-spring-note/images//image-20230209030853767.png)

* MySQL 같은 데이터베이스 서비스





### Provisioning

시스템을 즉시 사용할 수 있는 상태로 준비해두는것

> 프로비저닝(provisioning)은 사용자의 요구에 맞게 시스템 자원을 할당, 배치, 배포해 두었다가 필요 시 시스템을 즉시 사용할 수 있는 상태로 미리 준비해 두는 것을 말한다. 서버 자원 프로비저닝, 0S 프로비저닝, 소프트웨어 프로비저닝, 스토리지 프로비저닝, 계정 프로비저닝 등이 있 다. 수동으로 처리하는 '수동 프로비저닝'과 자동화 툴을 이용해 처리하는 '자동 프로비저닝'이 있다.



### DR

재난 복구 계획(disaster recovery plan, DRP)는 자연재해나 인위적인 재해가 일어나면 특정 단체에 중요한 기술 인프라를 복구하거나 지속할 목적으로 준비하는 데 대한 과정, 정책, 절차를 가리킨다.



### Failover

장애 극복 기능(영어: faillover, 페일오버)은 컴퓨터 서버, 시스템, 네트워크 등에서 이상이 생겼을 때 예비 시스템으로 자동전환되는 기능이다.

시스템 대체 작동 또는 장애 조치라고도 한다.



### Switchover

네트워크의 장애, 오류, 패치, 소프트웨어나 하드웨어 업그레이드등의 이유로 시스템 유지 관리를 위해 대기 중인 시스템으로 수동 전환하는 것

* 사람이 수동으로 전환을 실시하는것



### Failback

한편 페일백(failback)은 페일오버에 따라 전환된 서버/시스템/네트워크를 장애가 발생하기 전의 상태로 되돌리는 처리를 말한다.



# 오픈소스

오픈 소스 소프트웨어(open source software, OsS)는 소스 코드를 공개해 누구나 특별한 제한 없이 그 코드를 보고 사용할 수 있는 오픈 소스 라이선스를 만족하는 소프트웨어를 말한다.

![image-20230209031106385](/Users/ysk/study/study_repo/inf-junior-spring-note/images//image-20230209031106385.png)



## 운영 도구 위주

스크립트 처리기

* 젠킨스
* Ansible
* GoCD



로그 모니터링 도구

* Elasticsearch
* Logstash
* Kibana
* Beat

![image-20230209031212743](/Users/ysk/study/study_repo/inf-junior-spring-note/images//image-20230209031212743.png)

> **로그가 왜 로그일까?**
>
> 첫 시작은 선원들이 배의 속도를 측정하기 위해, 매듭이 묶인 통나무 더미를 선미에 던져 확인하던 것을 시작으로 하였습니다.
>
> 항해사들은 이 정보를 어딘가에 기록해 관찰하기 시작했고, 처음에는 몇장 안되던 정보들이 곧 하나의 책의 형태가 되기도 하였습니다.
>
> 책의 형태가 되자 이 책에는 항해에 필요한 다양한 정보들과 항해 이력같은 정보도 추가로 기록되기 시작했습니다.
>
> 예를들어 선박이 어떤 보안 구역을 통과할 때, 상호간의 서명이 필요했는데, 이때 이 책이 사용되기도 하였습니다.
>
> 그러자 보안 구역을 통과하기 위해 sian in - out 한다는 의미는 loaged in ~ out 한다는 의미와 동일하게 사용되기 시작했습니다.



차트 도구

* Kibana
* Grafana

패스워드 관리 도구

* Vault - hashIcorp

![image-20230209031252359](/Users/ysk/study/study_repo/inf-junior-spring-note/images//image-20230209031252359.png)

## 오픈소스 라이센스

* Apache license 2.0
* MIT
* WTFPL : 당신이 하고싶은대로 하세요. - 극단적인 복제 허용 자유 소프트웨어 라이선스



# 애자일

애자일 소프트웨어 개발(Agile software development) 혹은 애자일 개발 프로세스는 소프트웨어 엔지니어링에 대한 개념적인 얼개로, 프로젝트의 생명주기동안 반복적인 개발을 촉진한다.

예를 들면 폭포수 모델 또는 나선 모형과 구별되는 가장 큰 차이점은 essdocument-oriented, 즉 문서를 통한 개발 방법이 아니라, code-oriented, 실질적인 코딩을 통한 방법론이라는 점이다.

우리는 소프트웨어를 개발하고, 또 다른 사람의 개발을 도와주면서 소프트웨어 개발의 더 나은 방법들을 찾아가고 있다.

이 작업을 통해 우리는 다음을 가치 있게 여기게 되었다:



공정과 도구보다 개인과 상호작용을 

포괄적인 문서보다 작동하는 소프트웨어를 

계약 협상보다 고객과의 협력을 

계획을 따르기보다 변화에 대응하기를



가치 있게 여긴다. 이 말은, 왼쪽에 있는 것들도 가치가 있지만, 우리는 오른쪽에 있는 것들에 더 높은 가치를 둔다는 것이다.

> 소프트웨어 개발 자체가 복잡계이므로, 표준화된 절차와 규칙, 도구를 통한 해결보다는 팀 자체를 어떤 상황에서도 대처 가능한 팀으로 만들어야한다는 정신무장



## Devops

데브옵스(Devops)는 소프트웨어의 개발(Development)과 운영(Operations)의 합성어로서, 소프트웨어 개발자와 정보기술 전문가 간의 소통, 협업 및 통합을 강조하는 개발 환경이나 문화를 말한다. 데브옵스는 소프트웨어 개발조직과 운영조직간의 상호 의존적 대응이며 조직이 소프트웨어 제품과 서비스를 빠른 시간에 개발 및 배포하는 것을 목적으로 한다.



데브옵스 툴체인

1. ﻿﻿﻿계획 - 목적을 수행하기 앞서 방법이나 절차 등을 미리 생각하여 계획.
2. ﻿﻿﻿코드 - 코드 개발 및 검토, 버전 관리 도구, 코드 병합
3. ﻿﻿﻿빌드 - 지속적 통합(CI) 도구, 빌드 상태
4. ﻿﻿﻿테스트 - 테스트 및 결과가 성능을 결정
5. ﻿﻿﻿패키지 - 애플리케이션 디플로이 이전 단계
6. ﻿﻿﻿릴리스 - 변경사항 관리, 릴리스 승인, 릴리스 자동화
7. ﻿﻿﻿구성 - 인프라스트럭처 구성 및 관리, lac(nfrastructure as Code) 도구
8. ﻿﻿﻿모니터링 - 애플리케이션 성능 모니터링, 최종 사용자 경험.



## CI / CD

Continuous Integration / Continious Deployment

이 뒷단에는 엄청 많은 얘기가 있는데, 사실상 현업에서는 자동 빌드 / 자동 배포에 가까움



### CI / CD 사례 1

젠킨스 하나로 전부 구성 가능 

![image-20230209031613175](/Users/ysk/study/study_repo/inf-junior-spring-note/images//image-20230209031613175.png)



### CI / CD 사례 2

CI / CD 도구를 분리

![image-20230209031632959](/Users/ysk/study/study_repo/inf-junior-spring-note/images//image-20230209031632959.png)



### CI / CD - 사례 3

오픈소스 프로젝트들이 다수 사용 

![image-20230209031653474](/Users/ysk/study/study_repo/inf-junior-spring-note/images//image-20230209031653474.png)



### CI / CD - 사례 4

쿠버네티스 클러스터 환경에서의 CI / CD, 

* CD는 자동화가 안된 상태

![image-20230209031729270](/Users/ysk/study/study_repo/inf-junior-spring-note/images//image-20230209031729270.png)



### CI / CD 사례 4

쿠버네티스 환경에서의 CI / CD

![image-20230209031746261](/Users/ysk/study/study_repo/inf-junior-spring-note/images//image-20230209031746261.png)