version: '3.8'
services:

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    ports:
      - "5672:5672" # RabbitMQ 서버
      - "15672:15672" # 관리 인터페이스
    environment:
      RABBITMQ_DEFAULT_USER: user # 기본 사용자 이름 변경
      RABBITMQ_DEFAULT_PASS: password # 기본 사용자 비밀번호 변경
#    volumes:
#      - "./data:/var/lib/rabbitmq" # 데이터 볼륨
#      - "./config:/etc/rabbitmq" # 설정 파일을 위한 볼륨 (선택 사항)
#      - "./logs:/var/log/rabbitmq" # 로그 파일을 위한 볼륨 (선택 사항)

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - kafka-network

  broker:
    image: confluentinc/cp-kafka:7.3.0
    container_name: broker
    ports:
      - "29092:29092"
      - "9092:9092"
      - "9101:9101"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - kafka-network
  connect:
    image: confluentinc/cp-kafka-connect:7.3.0
    container_name: kafka-connect
    depends_on:
      - broker
      - zookeeper
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: broker:29092
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: "quickstart-avro"
      CONNECT_CONFIG_STORAGE_TOPIC: "quickstart-avro-config"
      CONNECT_OFFSET_STORAGE_TOPIC: "quickstart-avro-offsets"
      CONNECT_STATUS_STORAGE_TOPIC: "quickstart-avro-status"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_REST_ADVERTISED_HOST_NAME: "localhost"
      CONNECT_LOG4J_ROOT_LOGLEVEL: WARN
      CONNECT_PLUGIN_PATH: '/usr/share/java,/usr/share/confluent-hub-components,/etc/kafka-connect/jars'
    command:
      - bash
      - -c
      - |
        confluent-hub install --no-prompt confluentinc/kafka-connect-jdbc:latest &&
        echo "Starting Kafka Connect" &&
        /etc/confluent/docker/run
    volumes:
      - /Users/ysk/study/study_repo/inf-spring-cloud-msa/msa/kafka-connect:/etc/kafka-connect/jars
    networks:
      - kafka-network

networks:
  kafka-network:
    name: kafka-network
    driver: bridge
#  // Kafka Topic 생성
#  docker exec -it kafka kafka-topics.sh --create --topic topic-example1 --bootstrap-server localhost:9092
#
#
#토픽 리스트 확인: kafka-topics.sh --list --bootstrap-server localhost:9092
#토픽 상세 조회: kafka-topics.sh --describe --topic topic1 --bootstrap-server kafka:9092
#토픽 삭제: kafka-topics.sh --delete --bootstrap-server kafka:9092 --topic topic1