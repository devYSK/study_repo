/*
 * This file is generated by jOOQ.
 */
package com.uno.getinline.tables;


import com.uno.getinline.Getinline;
import com.uno.getinline.Indexes;
import com.uno.getinline.Keys;
import com.uno.getinline.constant.EventStatus;
import com.uno.getinline.tables.records.EventRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.EnumConverter;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Event extends TableImpl<EventRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>getinline.event</code>
     */
    public static final Event EVENT = new Event();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EventRecord> getRecordType() {
        return EventRecord.class;
    }

    /**
     * The column <code>getinline.event.id</code>.
     */
    public final TableField<EventRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>getinline.event.place_id</code>.
     */
    public final TableField<EventRecord, Long> PLACE_ID = createField(DSL.name("place_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>getinline.event.event_name</code>.
     */
    public final TableField<EventRecord, String> EVENT_NAME = createField(DSL.name("event_name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>getinline.event.event_status</code>.
     */
    public final TableField<EventRecord, EventStatus> EVENT_STATUS = createField(DSL.name("event_status"), SQLDataType.VARCHAR(20).nullable(false).defaultValue(DSL.inline("OPENED", SQLDataType.VARCHAR)), this, "", new EnumConverter<String, EventStatus>(String.class, EventStatus.class));

    /**
     * The column <code>getinline.event.event_start_datetime</code>.
     */
    public final TableField<EventRecord, LocalDateTime> EVENT_START_DATETIME = createField(DSL.name("event_start_datetime"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>getinline.event.event_end_datetime</code>.
     */
    public final TableField<EventRecord, LocalDateTime> EVENT_END_DATETIME = createField(DSL.name("event_end_datetime"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>getinline.event.current_number_of_people</code>.
     */
    public final TableField<EventRecord, Integer> CURRENT_NUMBER_OF_PEOPLE = createField(DSL.name("current_number_of_people"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>getinline.event.capacity</code>.
     */
    public final TableField<EventRecord, Integer> CAPACITY = createField(DSL.name("capacity"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>getinline.event.memo</code>.
     */
    public final TableField<EventRecord, String> MEMO = createField(DSL.name("memo"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>getinline.event.created_at</code>.
     */
    public final TableField<EventRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>getinline.event.modified_at</code>.
     */
    public final TableField<EventRecord, LocalDateTime> MODIFIED_AT = createField(DSL.name("modified_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private Event(Name alias, Table<EventRecord> aliased) {
        this(alias, aliased, null);
    }

    private Event(Name alias, Table<EventRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>getinline.event</code> table reference
     */
    public Event(String alias) {
        this(DSL.name(alias), EVENT);
    }

    /**
     * Create an aliased <code>getinline.event</code> table reference
     */
    public Event(Name alias) {
        this(alias, EVENT);
    }

    /**
     * Create a <code>getinline.event</code> table reference
     */
    public Event() {
        this(DSL.name("event"), null);
    }

    public <O extends Record> Event(Table<O> child, ForeignKey<O, EventRecord> key) {
        super(child, key, EVENT);
    }

    @Override
    public Schema getSchema() {
        return Getinline.GETINLINE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.EVENT_IDX_1BC18D95691E942C6BE0582FC, Indexes.EVENT_IDX_70BB5090E97A9C774FC8145F1, Indexes.EVENT_IDX_92D25CEF60C9A3ED64BC291C7, Indexes.EVENT_IDX_9F2FE388036352060533E460A, Indexes.EVENT_IDX_C94B41F3F084C10B88FAA3F52);
    }

    @Override
    public Identity<EventRecord, Long> getIdentity() {
        return (Identity<EventRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<EventRecord> getPrimaryKey() {
        return Keys.KEY_EVENT_PRIMARY;
    }

    @Override
    public List<UniqueKey<EventRecord>> getKeys() {
        return Arrays.<UniqueKey<EventRecord>>asList(Keys.KEY_EVENT_PRIMARY);
    }

    @Override
    public List<ForeignKey<EventRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<EventRecord, ?>>asList(Keys.FK_EVENT_ON_PLACE);
    }

    private transient Place _place;

    public Place place() {
        if (_place == null)
            _place = new Place(this, Keys.FK_EVENT_ON_PLACE);

        return _place;
    }

    @Override
    public Event as(String alias) {
        return new Event(DSL.name(alias), this);
    }

    @Override
    public Event as(Name alias) {
        return new Event(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Event rename(String name) {
        return new Event(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Event rename(Name name) {
        return new Event(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Long, Long, String, EventStatus, LocalDateTime, LocalDateTime, Integer, Integer, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
