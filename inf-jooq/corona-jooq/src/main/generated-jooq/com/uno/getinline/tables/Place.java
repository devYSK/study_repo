/*
 * This file is generated by jOOQ.
 */
package com.uno.getinline.tables;


import com.uno.getinline.Getinline;
import com.uno.getinline.Indexes;
import com.uno.getinline.Keys;
import com.uno.getinline.constant.PlaceType;
import com.uno.getinline.tables.records.PlaceRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.EnumConverter;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Place extends TableImpl<PlaceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>getinline.place</code>
     */
    public static final Place PLACE = new Place();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlaceRecord> getRecordType() {
        return PlaceRecord.class;
    }

    /**
     * The column <code>getinline.place.id</code>.
     */
    public final TableField<PlaceRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>getinline.place.place_type</code>.
     */
    public final TableField<PlaceRecord, PlaceType> PLACE_TYPE = createField(DSL.name("place_type"), SQLDataType.VARCHAR(20).nullable(false).defaultValue(DSL.inline("COMMON", SQLDataType.VARCHAR)), this, "", new EnumConverter<String, PlaceType>(String.class, PlaceType.class));

    /**
     * The column <code>getinline.place.place_name</code>.
     */
    public final TableField<PlaceRecord, String> PLACE_NAME = createField(DSL.name("place_name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>getinline.place.address</code>.
     */
    public final TableField<PlaceRecord, String> ADDRESS = createField(DSL.name("address"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>getinline.place.phone_number</code>.
     */
    public final TableField<PlaceRecord, String> PHONE_NUMBER = createField(DSL.name("phone_number"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>getinline.place.capacity</code>.
     */
    public final TableField<PlaceRecord, Integer> CAPACITY = createField(DSL.name("capacity"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>getinline.place.memo</code>.
     */
    public final TableField<PlaceRecord, String> MEMO = createField(DSL.name("memo"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>getinline.place.created_at</code>.
     */
    public final TableField<PlaceRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>getinline.place.modified_at</code>.
     */
    public final TableField<PlaceRecord, LocalDateTime> MODIFIED_AT = createField(DSL.name("modified_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private Place(Name alias, Table<PlaceRecord> aliased) {
        this(alias, aliased, null);
    }

    private Place(Name alias, Table<PlaceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>getinline.place</code> table reference
     */
    public Place(String alias) {
        this(DSL.name(alias), PLACE);
    }

    /**
     * Create an aliased <code>getinline.place</code> table reference
     */
    public Place(Name alias) {
        this(alias, PLACE);
    }

    /**
     * Create a <code>getinline.place</code> table reference
     */
    public Place() {
        this(DSL.name("place"), null);
    }

    public <O extends Record> Place(Table<O> child, ForeignKey<O, PlaceRecord> key) {
        super(child, key, PLACE);
    }

    @Override
    public Schema getSchema() {
        return Getinline.GETINLINE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PLACE_IDX_3EB99BE2C6DF3DCD9FB790099, Indexes.PLACE_IDX_4D2DAD1171AB1101220C1BDE4, Indexes.PLACE_IDX_51ECEAA568455E24788D07974, Indexes.PLACE_IDX_8937D5DFB2707F816927AA988, Indexes.PLACE_IDX_D5922C3BF14EB0FCB470AADE5);
    }

    @Override
    public Identity<PlaceRecord, Long> getIdentity() {
        return (Identity<PlaceRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<PlaceRecord> getPrimaryKey() {
        return Keys.KEY_PLACE_PRIMARY;
    }

    @Override
    public List<UniqueKey<PlaceRecord>> getKeys() {
        return Arrays.<UniqueKey<PlaceRecord>>asList(Keys.KEY_PLACE_PRIMARY);
    }

    @Override
    public Place as(String alias) {
        return new Place(DSL.name(alias), this);
    }

    @Override
    public Place as(Name alias) {
        return new Place(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Place rename(String name) {
        return new Place(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Place rename(Name name) {
        return new Place(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, PlaceType, String, String, String, Integer, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
