/*
 * This file is generated by jOOQ.
 */
package com.uno.getinline.tables;


import com.uno.getinline.Getinline;
import com.uno.getinline.Indexes;
import com.uno.getinline.Keys;
import com.uno.getinline.tables.records.AdminPlaceMapRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AdminPlaceMap extends TableImpl<AdminPlaceMapRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>getinline.admin_place_map</code>
     */
    public static final AdminPlaceMap ADMIN_PLACE_MAP = new AdminPlaceMap();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AdminPlaceMapRecord> getRecordType() {
        return AdminPlaceMapRecord.class;
    }

    /**
     * The column <code>getinline.admin_place_map.id</code>.
     */
    public final TableField<AdminPlaceMapRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>getinline.admin_place_map.admin_id</code>.
     */
    public final TableField<AdminPlaceMapRecord, Long> ADMIN_ID = createField(DSL.name("admin_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>getinline.admin_place_map.place_id</code>.
     */
    public final TableField<AdminPlaceMapRecord, Long> PLACE_ID = createField(DSL.name("place_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>getinline.admin_place_map.created_at</code>.
     */
    public final TableField<AdminPlaceMapRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>getinline.admin_place_map.modified_at</code>.
     */
    public final TableField<AdminPlaceMapRecord, LocalDateTime> MODIFIED_AT = createField(DSL.name("modified_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private AdminPlaceMap(Name alias, Table<AdminPlaceMapRecord> aliased) {
        this(alias, aliased, null);
    }

    private AdminPlaceMap(Name alias, Table<AdminPlaceMapRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>getinline.admin_place_map</code> table reference
     */
    public AdminPlaceMap(String alias) {
        this(DSL.name(alias), ADMIN_PLACE_MAP);
    }

    /**
     * Create an aliased <code>getinline.admin_place_map</code> table reference
     */
    public AdminPlaceMap(Name alias) {
        this(alias, ADMIN_PLACE_MAP);
    }

    /**
     * Create a <code>getinline.admin_place_map</code> table reference
     */
    public AdminPlaceMap() {
        this(DSL.name("admin_place_map"), null);
    }

    public <O extends Record> AdminPlaceMap(Table<O> child, ForeignKey<O, AdminPlaceMapRecord> key) {
        super(child, key, ADMIN_PLACE_MAP);
    }

    @Override
    public Schema getSchema() {
        return Getinline.GETINLINE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ADMIN_PLACE_MAP_IDX_B7AC127882C206DC0D1C3BC21, Indexes.ADMIN_PLACE_MAP_IDX_E095EDD8EC09EC05343F1BD06);
    }

    @Override
    public Identity<AdminPlaceMapRecord, Long> getIdentity() {
        return (Identity<AdminPlaceMapRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AdminPlaceMapRecord> getPrimaryKey() {
        return Keys.KEY_ADMIN_PLACE_MAP_PRIMARY;
    }

    @Override
    public List<UniqueKey<AdminPlaceMapRecord>> getKeys() {
        return Arrays.<UniqueKey<AdminPlaceMapRecord>>asList(Keys.KEY_ADMIN_PLACE_MAP_PRIMARY);
    }

    @Override
    public List<ForeignKey<AdminPlaceMapRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AdminPlaceMapRecord, ?>>asList(Keys.FK_ADMINPLACEMAP_ON_ADMIN, Keys.FK_ADMINPLACEMAP_ON_PLACE);
    }

    private transient Admin _admin;
    private transient Place _place;

    public Admin admin() {
        if (_admin == null)
            _admin = new Admin(this, Keys.FK_ADMINPLACEMAP_ON_ADMIN);

        return _admin;
    }

    public Place place() {
        if (_place == null)
            _place = new Place(this, Keys.FK_ADMINPLACEMAP_ON_PLACE);

        return _place;
    }

    @Override
    public AdminPlaceMap as(String alias) {
        return new AdminPlaceMap(DSL.name(alias), this);
    }

    @Override
    public AdminPlaceMap as(Name alias) {
        return new AdminPlaceMap(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AdminPlaceMap rename(String name) {
        return new AdminPlaceMap(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AdminPlaceMap rename(Name name) {
        return new AdminPlaceMap(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, Long, Long, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
