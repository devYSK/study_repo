/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.daos;


import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.generated.tables.JStore;
import org.jooq.generated.tables.pojos.Store;
import org.jooq.generated.tables.records.StoreRecord;
import org.jooq.impl.AutoConverter;
import org.jooq.impl.DAOImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StoreDao extends DAOImpl<StoreRecord, Store, Long> {

    /**
     * Create a new StoreDao without any configuration
     */
    public StoreDao() {
        super(JStore.STORE, Store.class);
    }

    /**
     * Create a new StoreDao with an attached configuration
     */
    public StoreDao(Configuration configuration) {
        super(JStore.STORE, Store.class, configuration);
    }

    @Override
    public Long getId(Store object) {
        return object.getStoreId();
    }

    /**
     * Fetch records that have <code>store_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Store> fetchRangeOfJStoreId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(JStore.STORE.STORE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>store_id IN (values)</code>
     */
    public List<Store> fetchByJStoreId(Long... values) {
        return fetch(JStore.STORE.STORE_ID, values);
    }

    /**
     * Fetch a unique record that has <code>store_id = value</code>
     */
    public Store fetchOneByJStoreId(Long value) {
        return fetchOne(JStore.STORE.STORE_ID, value);
    }

    /**
     * Fetch a unique record that has <code>store_id = value</code>
     */
    public Optional<Store> fetchOptionalByJStoreId(Long value) {
        return fetchOptional(JStore.STORE.STORE_ID, value);
    }

    /**
     * Fetch records that have <code>manager_staff_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Store> fetchRangeOfJManagerStaffId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(JStore.STORE.MANAGER_STAFF_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>manager_staff_id IN (values)</code>
     */
    public List<Store> fetchByJManagerStaffId(Long... values) {
        return fetch(JStore.STORE.MANAGER_STAFF_ID, values);
    }

    /**
     * Fetch a unique record that has <code>manager_staff_id = value</code>
     */
    public Store fetchOneByJManagerStaffId(Long value) {
        return fetchOne(JStore.STORE.MANAGER_STAFF_ID, value);
    }

    /**
     * Fetch a unique record that has <code>manager_staff_id = value</code>
     */
    public Optional<Store> fetchOptionalByJManagerStaffId(Long value) {
        return fetchOptional(JStore.STORE.MANAGER_STAFF_ID, value);
    }

    /**
     * Fetch records that have <code>address_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Store> fetchRangeOfJAddressId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(JStore.STORE.ADDRESS_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>address_id IN (values)</code>
     */
    public List<Store> fetchByJAddressId(Long... values) {
        return fetch(JStore.STORE.ADDRESS_ID, values);
    }

    /**
     * Fetch records that have <code>last_update BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Store> fetchRangeOfJLastUpdate(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(JStore.STORE.LAST_UPDATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>last_update IN (values)</code>
     */
    public List<Store> fetchByJLastUpdate(LocalDateTime... values) {
        return fetch(JStore.STORE.LAST_UPDATE, values);
    }
}
