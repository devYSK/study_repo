/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.daos;


import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.generated.tables.JLanguage;
import org.jooq.generated.tables.pojos.Language;
import org.jooq.generated.tables.records.LanguageRecord;
import org.jooq.impl.AutoConverter;
import org.jooq.impl.DAOImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LanguageDao extends DAOImpl<LanguageRecord, Language, Long> {

    /**
     * Create a new LanguageDao without any configuration
     */
    public LanguageDao() {
        super(JLanguage.LANGUAGE, Language.class);
    }

    /**
     * Create a new LanguageDao with an attached configuration
     */
    public LanguageDao(Configuration configuration) {
        super(JLanguage.LANGUAGE, Language.class, configuration);
    }

    @Override
    public Long getId(Language object) {
        return object.getLanguageId();
    }

    /**
     * Fetch records that have <code>language_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Language> fetchRangeOfJLanguageId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(JLanguage.LANGUAGE.LANGUAGE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>language_id IN (values)</code>
     */
    public List<Language> fetchByJLanguageId(Long... values) {
        return fetch(JLanguage.LANGUAGE.LANGUAGE_ID, values);
    }

    /**
     * Fetch a unique record that has <code>language_id = value</code>
     */
    public Language fetchOneByJLanguageId(Long value) {
        return fetchOne(JLanguage.LANGUAGE.LANGUAGE_ID, value);
    }

    /**
     * Fetch a unique record that has <code>language_id = value</code>
     */
    public Optional<Language> fetchOptionalByJLanguageId(Long value) {
        return fetchOptional(JLanguage.LANGUAGE.LANGUAGE_ID, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Language> fetchRangeOfJName(String lowerInclusive, String upperInclusive) {
        return fetchRange(JLanguage.LANGUAGE.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<Language> fetchByJName(String... values) {
        return fetch(JLanguage.LANGUAGE.NAME, values);
    }

    /**
     * Fetch records that have <code>last_update BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Language> fetchRangeOfJLastUpdate(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(JLanguage.LANGUAGE.LAST_UPDATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>last_update IN (values)</code>
     */
    public List<Language> fetchByJLastUpdate(LocalDateTime... values) {
        return fetch(JLanguage.LANGUAGE.LAST_UPDATE, values);
    }
}
