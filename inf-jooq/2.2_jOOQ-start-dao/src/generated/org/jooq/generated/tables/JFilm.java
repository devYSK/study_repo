/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.time.Year;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.Indexes;
import org.jooq.generated.JSakila;
import org.jooq.generated.Keys;
import org.jooq.generated.enums.FilmRating;
import org.jooq.generated.tables.JActor.ActorPath;
import org.jooq.generated.tables.JCategory.CategoryPath;
import org.jooq.generated.tables.JFilmActor.FilmActorPath;
import org.jooq.generated.tables.JFilmCategory.FilmCategoryPath;
import org.jooq.generated.tables.JInventory.InventoryPath;
import org.jooq.generated.tables.JLanguage.LanguagePath;
import org.jooq.generated.tables.records.FilmRecord;
import org.jooq.impl.AutoConverter;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UByte;
import org.jooq.types.UInteger;
import org.jooq.types.UShort;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JFilm extends TableImpl<FilmRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>sakila.film</code>
     */
    public static final JFilm FILM = new JFilm();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FilmRecord> getRecordType() {
        return FilmRecord.class;
    }

    /**
     * The column <code>sakila.film.film_id</code>.
     */
    public final TableField<FilmRecord, Long> FILM_ID = createField(DSL.name("film_id"), SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "", new AutoConverter<UInteger, Long>(UInteger.class, Long.class));

    /**
     * The column <code>sakila.film.title</code>.
     */
    public final TableField<FilmRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>sakila.film.description</code>.
     */
    public final TableField<FilmRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>sakila.film.release_year</code>.
     */
    public final TableField<FilmRecord, Year> RELEASE_YEAR = createField(DSL.name("release_year"), SQLDataType.YEAR, this, "");

    /**
     * The column <code>sakila.film.language_id</code>.
     */
    public final TableField<FilmRecord, Long> LANGUAGE_ID = createField(DSL.name("language_id"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "", new AutoConverter<UInteger, Long>(UInteger.class, Long.class));

    /**
     * The column <code>sakila.film.original_language_id</code>.
     */
    public final TableField<FilmRecord, Long> ORIGINAL_LANGUAGE_ID = createField(DSL.name("original_language_id"), SQLDataType.INTEGERUNSIGNED, this, "", new AutoConverter<UInteger, Long>(UInteger.class, Long.class));

    /**
     * The column <code>sakila.film.rental_duration</code>.
     */
    public final TableField<FilmRecord, Integer> RENTAL_DURATION = createField(DSL.name("rental_duration"), SQLDataType.TINYINTUNSIGNED.nullable(false).defaultValue(DSL.inline("3", SQLDataType.TINYINTUNSIGNED)), this, "", new AutoConverter<UByte, Integer>(UByte.class, Integer.class));

    /**
     * The column <code>sakila.film.rental_rate</code>.
     */
    public final TableField<FilmRecord, BigDecimal> RENTAL_RATE = createField(DSL.name("rental_rate"), SQLDataType.DECIMAL(4, 2).nullable(false).defaultValue(DSL.inline("4.99", SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>sakila.film.length</code>.
     */
    public final TableField<FilmRecord, Integer> LENGTH = createField(DSL.name("length"), SQLDataType.SMALLINTUNSIGNED, this, "", new AutoConverter<UShort, Integer>(UShort.class, Integer.class));

    /**
     * The column <code>sakila.film.replacement_cost</code>.
     */
    public final TableField<FilmRecord, BigDecimal> REPLACEMENT_COST = createField(DSL.name("replacement_cost"), SQLDataType.DECIMAL(5, 2).nullable(false).defaultValue(DSL.inline("19.99", SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>sakila.film.rating</code>.
     */
    public final TableField<FilmRecord, FilmRating> RATING = createField(DSL.name("rating"), SQLDataType.VARCHAR(5).defaultValue(DSL.inline("G", SQLDataType.VARCHAR)).asEnumDataType(FilmRating.class), this, "");

    /**
     * The column <code>sakila.film.special_features</code>.
     */
    public final TableField<FilmRecord, String> SPECIAL_FEATURES = createField(DSL.name("special_features"), SQLDataType.VARCHAR(54), this, "");

    /**
     * The column <code>sakila.film.last_update</code>.
     */
    public final TableField<FilmRecord, LocalDateTime> LAST_UPDATE = createField(DSL.name("last_update"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private JFilm(Name alias, Table<FilmRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JFilm(Name alias, Table<FilmRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>sakila.film</code> table reference
     */
    public JFilm(String alias) {
        this(DSL.name(alias), FILM);
    }

    /**
     * Create an aliased <code>sakila.film</code> table reference
     */
    public JFilm(Name alias) {
        this(alias, FILM);
    }

    /**
     * Create a <code>sakila.film</code> table reference
     */
    public JFilm() {
        this(DSL.name("film"), null);
    }

    public <O extends Record> JFilm(Table<O> path, ForeignKey<O, FilmRecord> childPath, InverseForeignKey<O, FilmRecord> parentPath) {
        super(path, childPath, parentPath, FILM);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class FilmPath extends JFilm implements Path<FilmRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> FilmPath(Table<O> path, ForeignKey<O, FilmRecord> childPath, InverseForeignKey<O, FilmRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private FilmPath(Name alias, Table<FilmRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public FilmPath as(String alias) {
            return new FilmPath(DSL.name(alias), this);
        }

        @Override
        public FilmPath as(Name alias) {
            return new FilmPath(alias, this);
        }

        @Override
        public FilmPath as(Table<?> alias) {
            return new FilmPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JSakila.SAKILA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.FILM_IDX_FK_LANGUAGE_ID, Indexes.FILM_IDX_FK_ORIGINAL_LANGUAGE_ID, Indexes.FILM_IDX_TITLE);
    }

    @Override
    public Identity<FilmRecord, Long> getIdentity() {
        return (Identity<FilmRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<FilmRecord> getPrimaryKey() {
        return Keys.KEY_FILM_PRIMARY;
    }

    @Override
    public List<ForeignKey<FilmRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_FILM_LANGUAGE, Keys.FK_FILM_LANGUAGE_ORIGINAL);
    }

    private transient LanguagePath _fkFilmLanguage;

    /**
     * Get the implicit join path to the <code>sakila.language</code> table, via
     * the <code>fk_film_language</code> key.
     */
    public LanguagePath fkFilmLanguage() {
        if (_fkFilmLanguage == null)
            _fkFilmLanguage = new LanguagePath(this, Keys.FK_FILM_LANGUAGE, null);

        return _fkFilmLanguage;
    }

    private transient LanguagePath _fkFilmLanguageOriginal;

    /**
     * Get the implicit join path to the <code>sakila.language</code> table, via
     * the <code>fk_film_language_original</code> key.
     */
    public LanguagePath fkFilmLanguageOriginal() {
        if (_fkFilmLanguageOriginal == null)
            _fkFilmLanguageOriginal = new LanguagePath(this, Keys.FK_FILM_LANGUAGE_ORIGINAL, null);

        return _fkFilmLanguageOriginal;
    }

    private transient FilmActorPath _filmActor;

    /**
     * Get the implicit to-many join path to the <code>sakila.film_actor</code>
     * table
     */
    public FilmActorPath filmActor() {
        if (_filmActor == null)
            _filmActor = new FilmActorPath(this, null, Keys.FK_FILM_ACTOR_FILM.getInverseKey());

        return _filmActor;
    }

    private transient FilmCategoryPath _filmCategory;

    /**
     * Get the implicit to-many join path to the
     * <code>sakila.film_category</code> table
     */
    public FilmCategoryPath filmCategory() {
        if (_filmCategory == null)
            _filmCategory = new FilmCategoryPath(this, null, Keys.FK_FILM_CATEGORY_FILM.getInverseKey());

        return _filmCategory;
    }

    private transient InventoryPath _inventory;

    /**
     * Get the implicit to-many join path to the <code>sakila.inventory</code>
     * table
     */
    public InventoryPath inventory() {
        if (_inventory == null)
            _inventory = new InventoryPath(this, null, Keys.FK_INVENTORY_FILM.getInverseKey());

        return _inventory;
    }

    /**
     * Get the implicit many-to-many join path to the <code>sakila.actor</code>
     * table
     */
    public ActorPath actor() {
        return filmActor().actor();
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>sakila.category</code> table
     */
    public CategoryPath category() {
        return filmCategory().category();
    }

    @Override
    public JFilm as(String alias) {
        return new JFilm(DSL.name(alias), this);
    }

    @Override
    public JFilm as(Name alias) {
        return new JFilm(alias, this);
    }

    @Override
    public JFilm as(Table<?> alias) {
        return new JFilm(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JFilm rename(String name) {
        return new JFilm(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JFilm rename(Name name) {
        return new JFilm(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JFilm rename(Table<?> name) {
        return new JFilm(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JFilm where(Condition condition) {
        return new JFilm(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JFilm where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JFilm where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JFilm where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JFilm where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JFilm where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JFilm where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JFilm where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JFilm whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JFilm whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
