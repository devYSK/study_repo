/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.Indexes;
import org.jooq.generated.JSakila;
import org.jooq.generated.Keys;
import org.jooq.generated.tables.JAddress.AddressPath;
import org.jooq.generated.tables.JCustomer.CustomerPath;
import org.jooq.generated.tables.JInventory.InventoryPath;
import org.jooq.generated.tables.JStaff.StaffPath;
import org.jooq.generated.tables.records.StoreRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JStore extends TableImpl<StoreRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>sakila.store</code>
     */
    public static final JStore STORE = new JStore();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StoreRecord> getRecordType() {
        return StoreRecord.class;
    }

    /**
     * The column <code>sakila.store.store_id</code>.
     */
    public final TableField<StoreRecord, UInteger> STORE_ID = createField(DSL.name("store_id"), SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>sakila.store.manager_staff_id</code>.
     */
    public final TableField<StoreRecord, UInteger> MANAGER_STAFF_ID = createField(DSL.name("manager_staff_id"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sakila.store.address_id</code>.
     */
    public final TableField<StoreRecord, UInteger> ADDRESS_ID = createField(DSL.name("address_id"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sakila.store.last_update</code>.
     */
    public final TableField<StoreRecord, LocalDateTime> LAST_UPDATE = createField(DSL.name("last_update"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private JStore(Name alias, Table<StoreRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JStore(Name alias, Table<StoreRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>sakila.store</code> table reference
     */
    public JStore(String alias) {
        this(DSL.name(alias), STORE);
    }

    /**
     * Create an aliased <code>sakila.store</code> table reference
     */
    public JStore(Name alias) {
        this(alias, STORE);
    }

    /**
     * Create a <code>sakila.store</code> table reference
     */
    public JStore() {
        this(DSL.name("store"), null);
    }

    public <O extends Record> JStore(Table<O> path, ForeignKey<O, StoreRecord> childPath, InverseForeignKey<O, StoreRecord> parentPath) {
        super(path, childPath, parentPath, STORE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class StorePath extends JStore implements Path<StoreRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> StorePath(Table<O> path, ForeignKey<O, StoreRecord> childPath, InverseForeignKey<O, StoreRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private StorePath(Name alias, Table<StoreRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public StorePath as(String alias) {
            return new StorePath(DSL.name(alias), this);
        }

        @Override
        public StorePath as(Name alias) {
            return new StorePath(alias, this);
        }

        @Override
        public StorePath as(Table<?> alias) {
            return new StorePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JSakila.SAKILA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.STORE_IDX_FK_ADDRESS_ID);
    }

    @Override
    public Identity<StoreRecord, UInteger> getIdentity() {
        return (Identity<StoreRecord, UInteger>) super.getIdentity();
    }

    @Override
    public UniqueKey<StoreRecord> getPrimaryKey() {
        return Keys.KEY_STORE_PRIMARY;
    }

    @Override
    public List<UniqueKey<StoreRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_STORE_IDX_UNIQUE_MANAGER);
    }

    @Override
    public List<ForeignKey<StoreRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_STORE_STAFF, Keys.FK_STORE_ADDRESS);
    }

    private transient StaffPath _staff;

    /**
     * Get the implicit join path to the <code>sakila.staff</code> table.
     */
    public StaffPath staff() {
        if (_staff == null)
            _staff = new StaffPath(this, Keys.FK_STORE_STAFF, null);

        return _staff;
    }

    private transient AddressPath _address;

    /**
     * Get the implicit join path to the <code>sakila.address</code> table.
     */
    public AddressPath address() {
        if (_address == null)
            _address = new AddressPath(this, Keys.FK_STORE_ADDRESS, null);

        return _address;
    }

    private transient CustomerPath _customer;

    /**
     * Get the implicit to-many join path to the <code>sakila.customer</code>
     * table
     */
    public CustomerPath customer() {
        if (_customer == null)
            _customer = new CustomerPath(this, null, Keys.FK_CUSTOMER_STORE.getInverseKey());

        return _customer;
    }

    private transient InventoryPath _inventory;

    /**
     * Get the implicit to-many join path to the <code>sakila.inventory</code>
     * table
     */
    public InventoryPath inventory() {
        if (_inventory == null)
            _inventory = new InventoryPath(this, null, Keys.FK_INVENTORY_STORE.getInverseKey());

        return _inventory;
    }

    @Override
    public JStore as(String alias) {
        return new JStore(DSL.name(alias), this);
    }

    @Override
    public JStore as(Name alias) {
        return new JStore(alias, this);
    }

    @Override
    public JStore as(Table<?> alias) {
        return new JStore(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JStore rename(String name) {
        return new JStore(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JStore rename(Name name) {
        return new JStore(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JStore rename(Table<?> name) {
        return new JStore(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JStore where(Condition condition) {
        return new JStore(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JStore where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JStore where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JStore where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JStore where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JStore where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JStore where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JStore where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JStore whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JStore whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
